// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Kindly
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import Combine
import CommonCrypto
import DeveloperToolsSupport
import Foundation
@_exported import Kindly
import LocalAuthentication
import Network
import OSLog
import PhotosUI
import QuartzCore
import SafariServices
import Security
import Sentry
import Starscream
import Swift
import SwiftUI
import SwiftyGif
import SwiftyJSON
import SystemConfiguration
import UIKit.UIColor
import UIKit.UIDevice
import UIKit.UIImage
import UIKit
import UniformTypeIdentifiers
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ExternalChatMessage : Swift.Hashable, Swift.Identifiable, Swift.Comparable {
  public let id: Swift.String
  public static func < (lhs: Kindly.ExternalChatMessage, rhs: Kindly.ExternalChatMessage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Kindly.ExternalChatMessage, b: Kindly.ExternalChatMessage) -> Swift.Bool
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public enum ExternalExchangeType : Swift.String, Swift.Encodable {
  case dialogue
  case fallback
  case greeting
  case systemDialogue
  case userSays
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ExternalChatMessageSender : Swift.String, Swift.Encodable {
  case agent
  case bot
  case system
  case unknown
  case user
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Bot {
  public let name: Swift.String
  public let avatarURL: Foundation.URL?
}
public struct OEmbedRespnse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct KindlySDKConfig {
  public var getAuthToken: Kindly.AuthTokenCallback? {
    get
    set
  }
}
extension UIKit.UIControl {
  @_Concurrency.MainActor @preconcurrency public func addAction(for controlEvents: UIKit.UIControl.Event = .touchUpInside, _ closure: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func addAction(for controlEvents: UIKit.UIControl.Event = .touchUpInside, _ closure: @escaping (UIKit.UIControl) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func removeActions(for event: UIKit.UIControl.Event)
  @_Concurrency.MainActor @preconcurrency public func removeAllActions()
}
extension UIKit.UIControl {
  @_Concurrency.MainActor @preconcurrency public func on(_ controlEvents: UIKit.UIControl.Event, invokeHandler handler: @escaping (UIKit.UIControl) -> Swift.Void) -> Swift.AnyObject
  @_Concurrency.MainActor @preconcurrency public func removeHandler(_ handler: Swift.AnyObject)
}
public protocol Coordinator {
  var childCoordinators: [any Kindly.Coordinator] { get set }
  var navigationController: UIKit.UINavigationController { get set }
  func start()
}
public enum Storyboard {
  case naStoryboard
  case main
  public static func == (a: Kindly.Storyboard, b: Kindly.Storyboard) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public static func classNameAsString() -> Swift.String
  @_Concurrency.MainActor @preconcurrency public static func instantiate(withIdentifier viewControllerIdentifier: Swift.String?, fromStoryboard storyboard: Kindly.Storyboard?) -> Self
  @_Concurrency.MainActor @preconcurrency public static func instantiateInitialViewController(fromStoryboard storyboard: Kindly.Storyboard?) -> Self
}
@_hasMissingDesignatedInitializers @objcMembers public class MainCoordinator : Kindly.Coordinator {
  public static let shared: Kindly.MainCoordinator
  public var childCoordinators: [any Kindly.Coordinator]
  @objc public var navigationController: UIKit.UINavigationController
  @objc public static var currentViewController: UIKit.UIViewController? {
    @objc get
  }
  @objc public static var presentedViewController: UIKit.UIViewController? {
    @objc get
  }
  @objc deinit
}
extension Kindly.MainCoordinator {
  final public class func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool? = nil, removePreviousVCs: Swift.Bool? = nil, dismissPresentedViewController: Swift.Bool? = nil, hideNavigationBar: Swift.Bool = false)
  final public class func present(_ viewController: UIKit.UIViewController, fullScreen: Swift.Bool? = nil, animated: Swift.Bool? = nil, dismissPresentedViewController: Swift.Bool? = nil, hideNavigationBar: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
  final public class func popToRootViewController(animated: Swift.Bool? = nil, dismissPresentedViewController: Swift.Bool? = nil)
  final public class func popCurrentViewController(animated: Swift.Bool? = nil, dismissPresentedViewController: Swift.Bool? = nil)
  final public class func dismissPresentedViewController(_ animated: Swift.Bool? = nil)
  @objc final public class func enableLargeTitles()
  @objc final public class func disableLargeTitles()
  @objc final public class func setLargeTitleDisplayMode(_ mode: UIKit.UINavigationItem.LargeTitleDisplayMode)
  @objc final public class func setNavigationTintColor(_ color: UIKit.UIColor)
  @objc final public class func setHideBackButtonTitle(_ isHidden: Swift.Bool)
}
extension Kindly.MainCoordinator {
  @objc dynamic public func start()
}
extension Foundation.NSMutableAttributedString {
  public func trimCharactersInSet(charSet: Foundation.CharacterSet)
}
public struct ExternalChatButton {
}
public enum ChatConnectionState {
  case none
  case connecting
  case connected
  case disconnected
  case failed
  case conversationEnded
  public static func == (a: Kindly.ChatConnectionState, b: Kindly.ChatConnectionState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol KindlyChatClientDelegate : ObjectiveC.NSObject {
  func didPressButton(chatButton: Kindly.ExternalChatButton, chatLog: [Kindly.ExternalChatMessage])
}
final public class KindlyChatClient {
  public static var shared: Kindly.KindlyChatClient!
  public static var config: Kindly.KindlySDKConfig {
    get
    set
  }
  public static var connectionState: Kindly.ChatConnectionState {
    get
  }
  public static var delegate: (any Kindly.KindlyChatClientDelegate)! {
    get
    set
  }
  public init(config: Kindly.KindlySDKConfig, behaviorType: Kindly.BehaviorTypeEnum)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NotificationDelegate : ObjectiveC.NSObject, UserNotifications.UNUserNotificationCenterDelegate {
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Promise<T> {
  @objc deinit
}
extension Kindly.Promise {
  public func fulfill(_ value: T)
  public func reject(_ error: any Swift.Error)
  public func pipe(to target: Kindly.Promise<T>)
}
@_hasMissingDesignatedInitializers public class AIAlert {
  public struct AlertTextField {
    public let placeholder: Swift.String
    public let keyboardType: UIKit.UIKeyboardType
    public init(placeholder: Swift.String, keyboardType: UIKit.UIKeyboardType? = nil)
  }
  public struct AlertButton {
    public let title: Swift.String
    public let style: UIKit.UIAlertAction.Style
    public let callback: ((_ textfields: [UIKit.UITextField]?) -> Swift.Void)?
    public init(title: Swift.String, style: UIKit.UIAlertAction.Style? = nil, callback: ((_ textfields: [UIKit.UITextField]?) -> Swift.Void)? = nil)
  }
  final public class func displayNativeMessage(message: Swift.String? = nil, withTitle title: Swift.String? = nil, style: UIKit.UIAlertController.Style = .alert, buttons: [Kindly.AIAlert.AlertButton], textFields: [Kindly.AIAlert.AlertTextField]? = nil)
  final public class func displayNativeMessage(message: Swift.String? = nil, withTitle title: Swift.String? = nil, style: UIKit.UIAlertController.Style = .alert, buttons: Kindly.AIAlert.AlertButton..., textFields: Kindly.AIAlert.AlertTextField?...)
  @objc deinit
}
extension Kindly.AIAlert.AlertButton {
  public static let okay: Kindly.AIAlert.AlertButton
  public static let cancel: Kindly.AIAlert.AlertButton
  public static let discard: Kindly.AIAlert.AlertButton
  public static func yes(callback: ((_ textfields: [UIKit.UITextField]?) -> Swift.Void)? = nil) -> Kindly.AIAlert.AlertButton
  public static func no(callback: ((_ textfields: [UIKit.UITextField]?) -> Swift.Void)? = nil) -> Kindly.AIAlert.AlertButton
}
@objc @_inheritsConvenienceInitializers public class AIPhotoSelection : ObjectiveC.NSObject {
  final public class func selectImage(inViewController viewController: UIKit.UIViewController, from source: UIKit.UIImagePickerController.SourceType, image_callback: ((UIKit.UIImage) -> Swift.Void)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension Kindly.AIPhotoSelection : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func imagePickerController(_: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func imagePickerControllerDidCancel(_: UIKit.UIImagePickerController)
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func onTap(_ closure: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func onLongTap(_ closure: @escaping (_ gestureReconizer: UIKit.UILongPressGestureRecognizer) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func removeAllGestureRecognizers()
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func makeCircular()
  @_Concurrency.MainActor @preconcurrency public func makeRounded(cornerRadius: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor @preconcurrency public func addShadow(color: UIKit.UIColor? = nil, opacity: Swift.Float? = nil, offset: CoreFoundation.CGSize? = nil, radius: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor @preconcurrency public func addDashedBorder(color: UIKit.UIColor, lineWidth: CoreFoundation.CGFloat, dashPattern: [Foundation.NSNumber])
  @_Concurrency.MainActor @preconcurrency public func removeDashedBorder()
}
public typealias KindlySDK = Kindly.KindlyChatClient
public enum BehaviorTypeEnum {
  case native
  case web
  public static func == (a: Kindly.BehaviorTypeEnum, b: Kindly.BehaviorTypeEnum) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Kindly.KindlyChatClient {
  public static var isChatDisplayed: Swift.Bool {
    get
  }
  public static var notificationDelegate: Kindly.NotificationDelegate {
    get
  }
  public static var verboseLogging: Swift.Bool {
    get
    set
  }
  public static var enableCrashReporting: Swift.Bool {
    get
    set
  }
  final public class func start(botKey: Swift.String, authTokenCallback: Kindly.AuthTokenCallback? = nil)
  final public class func displayChat(languageCode: Swift.String?, triggerDialogueId: Swift.String? = nil)
  final public func displayChat(languageCode: Swift.String? = nil, triggerDialogueId: Swift.String? = nil)
  final public class func setNewContext(_ context: [Swift.String : Swift.String])
  final public func setNewContext(_ context: [Swift.String : Swift.String])
  final public class func clearNewContext()
  final public func clearNewContext()
  final public class func setAPNSDeviceToken(_ deviceToken: Foundation.Data)
  final public class func setAPNSDeviceToken(_ deviceToken: Swift.String)
  @discardableResult
  final public class func saveAuthToken(_ token: Swift.String) -> Swift.Bool
  @discardableResult
  final public func saveAuthToken(_ token: Swift.String) -> Swift.Bool
  final public class func closeChat()
  final public func closeChat()
  final public class func endChat() -> Kindly.Promise<Swift.Void>
  final public func endChat() -> Kindly.Promise<Swift.Void>
  final public class func notificationReceived(_ userInfo: [Swift.AnyHashable : Any])
  final public class func notificationReceived(_ notification: UserNotifications.UNNotification)
  final public class func notificationResponseReceived(_ response: UserNotifications.UNNotificationResponse)
  final public class func triggerDialogue(id: Swift.String)
  final public class func play()
}
public typealias AuthTokenCallback = (_ chatId: Swift.String, _ promise: Kindly.Promise<Swift.String>) -> Swift.Void
extension Kindly.ExternalExchangeType : Swift.Equatable {}
extension Kindly.ExternalExchangeType : Swift.Hashable {}
extension Kindly.ExternalExchangeType : Swift.RawRepresentable {}
extension Kindly.ExternalChatMessageSender : Swift.Equatable {}
extension Kindly.ExternalChatMessageSender : Swift.Hashable {}
extension Kindly.ExternalChatMessageSender : Swift.RawRepresentable {}
extension Kindly.Storyboard : Swift.Equatable {}
extension Kindly.Storyboard : Swift.Hashable {}
extension Kindly.ChatConnectionState : Swift.Equatable {}
extension Kindly.ChatConnectionState : Swift.Hashable {}
extension Kindly.BehaviorTypeEnum : Swift.Equatable {}
extension Kindly.BehaviorTypeEnum : Swift.Hashable {}
