// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Kindly
import AVFoundation
import AVKit
import Combine
import CommonCrypto
import DeveloperToolsSupport
import Foundation
import ImageIO
@_exported import Kindly
import LocalAuthentication
import Network
import OSLog
import PhotosUI
import QuartzCore
import SafariServices
import Security
import Sentry
import Starscream
import Swift
import SwiftUI
import SwiftyJSON
import SystemConfiguration
import UIKit.UIColor
import UIKit.UIDevice
import UIKit.UIImage
import UIKit
import UniformTypeIdentifiers
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ExternalChatMessage : Swift.Hashable, Swift.Identifiable, Swift.Comparable {
  public let id: Swift.String
  public static func < (lhs: Kindly.ExternalChatMessage, rhs: Kindly.ExternalChatMessage) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Kindly.ExternalChatMessage, b: Kindly.ExternalChatMessage) -> Swift.Bool
  public typealias ID = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
public enum ExternalExchangeType : Swift.String, Swift.Encodable {
  case dialogue
  case fallback
  case greeting
  case systemDialogue
  case userSays
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ExternalChatMessageSender : Swift.String, Swift.Encodable {
  case agent
  case bot
  case system
  case unknown
  case user
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Bot {
  public let name: Swift.String
  public let avatarURL: Foundation.URL?
}
public typealias GifLevelOfIntegrity = Swift.Float
extension Swift.Float {
  public static let highestNoFrameSkipping: Kindly.GifLevelOfIntegrity
  public static let `default`: Kindly.GifLevelOfIntegrity
  public static let lowForManyGifs: Kindly.GifLevelOfIntegrity
  public static let lowForTooManyGifs: Kindly.GifLevelOfIntegrity
  public static let superLowForSlideShow: Kindly.GifLevelOfIntegrity
}
extension UIKit.UIImage {
  convenience public init?(imageData: Foundation.Data, levelOfIntegrity: Kindly.GifLevelOfIntegrity = .default) throws
  convenience public init?(imageName: Swift.String, levelOfIntegrity: Kindly.GifLevelOfIntegrity = .default, bundle: Foundation.Bundle = Bundle.main) throws
}
extension UIKit.UIImage {
  convenience public init(gifData: Foundation.Data, levelOfIntegrity: Kindly.GifLevelOfIntegrity = .default) throws
  convenience public init(gifName: Swift.String, levelOfIntegrity: Kindly.GifLevelOfIntegrity = .default, bundle: Foundation.Bundle = Bundle.main) throws
  public func setGifFromData(_ data: Foundation.Data, levelOfIntegrity: Kindly.GifLevelOfIntegrity) throws
  public func setGif(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main) throws
  public func framesCount() -> Swift.Int
  public func setGif(_ name: Swift.String, levelOfIntegrity: Kindly.GifLevelOfIntegrity, bundle: Foundation.Bundle = Bundle.main) throws
  public func clear()
}
extension UIKit.UIImage {
  public var imageSource: ImageIO.CGImageSource? {
    get
    set
  }
  public var displayRefreshFactor: Swift.Int? {
    get
    set
  }
  public var imageSize: Swift.Int? {
    get
    set
  }
  public var imageCount: Swift.Int? {
    get
    set
  }
  public var displayOrder: [Swift.Int]? {
    get
    set
  }
  public var imageData: Foundation.Data? {
    get
    set
  }
}
public struct OEmbedRespnse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct KindlySDKConfig {
  public var getAuthToken: Kindly.AuthTokenCallback? {
    get
    set
  }
}
extension UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public func addAction(for controlEvents: UIKit.UIControl.Event = .touchUpInside, _ closure: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func addAction(for controlEvents: UIKit.UIControl.Event = .touchUpInside, _ closure: @escaping (UIKit.UIControl) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func removeActions(for event: UIKit.UIControl.Event)
  @_Concurrency.MainActor(unsafe) public func removeAllActions()
}
extension UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public func on(_ controlEvents: UIKit.UIControl.Event, invokeHandler handler: @escaping (UIKit.UIControl) -> Swift.Void) -> Swift.AnyObject
  @_Concurrency.MainActor(unsafe) public func removeHandler(_ handler: Swift.AnyObject)
}
extension Foundation.NSMutableAttributedString {
  public func trimCharactersInSet(charSet: Foundation.CharacterSet)
}
public struct ExternalChatButton {
}
public enum ChatConnectionState {
  case none
  case connecting
  case connected
  case disconnected
  case failed
  case conversationEnded
  public static func == (a: Kindly.ChatConnectionState, b: Kindly.ChatConnectionState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol KindlyChatClientDelegate : ObjectiveC.NSObject {
  func didPressButton(chatButton: Kindly.ExternalChatButton, chatLog: [Kindly.ExternalChatMessage])
}
final public class KindlyChatClient {
  public static var shared: Kindly.KindlyChatClient!
  public static var config: Kindly.KindlySDKConfig {
    get
    set
  }
  public static var connectionState: Kindly.ChatConnectionState {
    get
  }
  public static var delegate: (any Kindly.KindlyChatClientDelegate)! {
    get
    set
  }
  public init(config: Kindly.KindlySDKConfig)
  @objc deinit
}
@objc public protocol SwiftyGifDelegate {
  @objc optional func gifDidStart(sender: UIKit.UIImageView)
  @objc optional func gifDidLoop(sender: UIKit.UIImageView)
  @objc optional func gifDidStop(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFinish(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFail(sender: UIKit.UIImageView, url: Foundation.URL, error: (any Swift.Error)?)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func setImage(_ image: UIKit.UIImage, manager: Kindly.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) convenience public init(gifImage: UIKit.UIImage, manager: Kindly.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
  @_Concurrency.MainActor(unsafe) convenience public init(gifURL: Foundation.URL, manager: Kindly.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
  @_Concurrency.MainActor(unsafe) public func setGifImage(_ gifImage: UIKit.UIImage, manager: Kindly.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1)
}
extension UIKit.UIImageView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func setGifFromURL(_ url: Foundation.URL, manager: Kindly.SwiftyGifManager = .defaultManager, loopCount: Swift.Int = -1, levelOfIntegrity: Kindly.GifLevelOfIntegrity = .default, session: Foundation.URLSession = URLSession.shared, showLoader: Swift.Bool = true, customLoader: UIKit.UIView? = nil) -> Foundation.URLSessionDataTask?
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public func startAnimatingGif()
  @_Concurrency.MainActor(unsafe) public func stopAnimatingGif()
  @_Concurrency.MainActor(unsafe) public func isAnimatingGif() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func showFrameForIndexDelta(_ delta: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func showFrameAtIndex(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func updateCache()
  @_Concurrency.MainActor(unsafe) public func updateCurrentImage()
  @_Concurrency.MainActor(unsafe) public func currentFrameIndex() -> Swift.Int
  @_Concurrency.MainActor(unsafe) public func frameAtIndex(index: Swift.Int) -> UIKit.UIImage
  @_Concurrency.MainActor(unsafe) public func isDiscarded(_ imageView: UIKit.UIView?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func isDisplayedInScreen(_ imageView: UIKit.UIView?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func clear()
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) public var gifImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var currentImage: UIKit.UIImage? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var loopCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animationManager: Kindly.SwiftyGifManager? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var delegate: (any Kindly.SwiftyGifDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var displaying: Swift.Bool {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers public class NotificationDelegate : ObjectiveC.NSObject, UserNotifications.UNUserNotificationCenterDelegate {
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Promise<T> {
  @objc deinit
}
extension Kindly.Promise {
  public func fulfill(_ value: T)
  public func reject(_ error: any Swift.Error)
  public func pipe(to target: Kindly.Promise<T>)
}
@_hasMissingDesignatedInitializers public class AIAlert {
  public struct AlertTextField {
    public let placeholder: Swift.String
    public let keyboardType: UIKit.UIKeyboardType
    public init(placeholder: Swift.String, keyboardType: UIKit.UIKeyboardType? = nil)
  }
  public struct AlertButton {
    public let title: Swift.String
    public let style: UIKit.UIAlertAction.Style
    public let callback: ((_ textfields: [UIKit.UITextField]?) -> Swift.Void)?
    public init(title: Swift.String, style: UIKit.UIAlertAction.Style? = nil, callback: ((_ textfields: [UIKit.UITextField]?) -> Swift.Void)? = nil)
  }
  final public class func displayNativeMessage(message: Swift.String? = nil, withTitle title: Swift.String? = nil, style: UIKit.UIAlertController.Style = .alert, buttons: [Kindly.AIAlert.AlertButton], textFields: [Kindly.AIAlert.AlertTextField]? = nil)
  final public class func displayNativeMessage(message: Swift.String? = nil, withTitle title: Swift.String? = nil, style: UIKit.UIAlertController.Style = .alert, buttons: Kindly.AIAlert.AlertButton..., textFields: Kindly.AIAlert.AlertTextField?...)
  @objc deinit
}
extension Kindly.AIAlert.AlertButton {
  public static let okay: Kindly.AIAlert.AlertButton
  public static let cancel: Kindly.AIAlert.AlertButton
  public static let discard: Kindly.AIAlert.AlertButton
  public static func yes(callback: ((_ textfields: [UIKit.UITextField]?) -> Swift.Void)? = nil) -> Kindly.AIAlert.AlertButton
  public static func no(callback: ((_ textfields: [UIKit.UITextField]?) -> Swift.Void)? = nil) -> Kindly.AIAlert.AlertButton
}
@objc @_inheritsConvenienceInitializers public class AIPhotoSelection : ObjectiveC.NSObject {
  final public class func selectImage(inViewController viewController: UIKit.UIViewController, from source: UIKit.UIImagePickerController.SourceType, image_callback: ((UIKit.UIImage) -> Swift.Void)? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension Kindly.AIPhotoSelection : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_: UIKit.UIImagePickerController)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func onTap(_ closure: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func onLongTap(_ closure: @escaping (_ gestureReconizer: UIKit.UILongPressGestureRecognizer) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func removeAllGestureRecognizers()
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func makeCircular()
  @_Concurrency.MainActor(unsafe) public func makeRounded(cornerRadius: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor(unsafe) public func addShadow(color: UIKit.UIColor? = nil, opacity: Swift.Float? = nil, offset: CoreFoundation.CGSize? = nil, radius: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor(unsafe) public func addDashedBorder(color: UIKit.UIColor, lineWidth: CoreFoundation.CGFloat, dashPattern: [Foundation.NSNumber])
  @_Concurrency.MainActor(unsafe) public func removeDashedBorder()
}
public typealias PlatformImageView = UIKit.UIImageView
open class SwiftyGifManager {
  public static var defaultManager: Kindly.SwiftyGifManager
  open var haveCache: Swift.Bool
  open var remoteCache: [Foundation.URL : Foundation.Data]
  public var mode: Foundation.RunLoop.Mode
  public init(memoryLimit: Swift.Int)
  @objc deinit
  public func startTimerIfNeeded()
  public func stopTimer()
  open func addImageView(_ imageView: Kindly.PlatformImageView) -> Swift.Bool
  open func deleteImageView(_ imageView: Kindly.PlatformImageView)
  open func updateCacheSize(for imageView: Kindly.PlatformImageView, add: Swift.Bool)
  open func clear()
  open func containsImageView(_ imageView: Kindly.PlatformImageView) -> Swift.Bool
  open func hasCache(_ imageView: Kindly.PlatformImageView) -> Swift.Bool
}
public typealias KindlySDK = Kindly.KindlyChatClient
extension Kindly.KindlyChatClient {
  public static var isChatDisplayed: Swift.Bool {
    get
  }
  public static var notificationDelegate: Kindly.NotificationDelegate {
    get
  }
  public static var verboseLogging: Swift.Bool {
    get
    set
  }
  public static var enableCrashReporting: Swift.Bool {
    get
    set
  }
  final public class func start(botKey: Swift.String, authTokenCallback: Kindly.AuthTokenCallback? = nil)
  final public class func displayChat(languageCode: Swift.String? = nil, triggerDialogueId: Swift.String? = nil)
  final public func displayChat(languageCode: Swift.String? = nil, triggerDialogueId: Swift.String? = nil)
  final public class func setNewContext(_ context: [Swift.String : Swift.String])
  final public func setNewContext(_ context: [Swift.String : Swift.String])
  final public class func clearNewContext()
  final public func clearNewContext()
  final public class func setAPNSDeviceToken(_ deviceToken: Foundation.Data)
  final public class func setAPNSDeviceToken(_ deviceToken: Swift.String)
  @discardableResult
  final public class func saveAuthToken(_ token: Swift.String) -> Swift.Bool
  @discardableResult
  final public func saveAuthToken(_ token: Swift.String) -> Swift.Bool
  final public class func closeChat()
  final public func closeChat()
  final public class func endChat() -> Kindly.Promise<Swift.Void>
  final public func endChat() -> Kindly.Promise<Swift.Void>
  final public class func notificationReceived(_ userInfo: [Swift.AnyHashable : Any])
  final public class func notificationReceived(_ notification: UserNotifications.UNNotification)
  final public class func notificationResponseReceived(_ response: UserNotifications.UNNotificationResponse)
  final public class func triggerDialogue(id: Swift.String)
  final public class func play()
}
public typealias AuthTokenCallback = (_ chatId: Swift.String, _ promise: Kindly.Promise<Swift.String>) -> Swift.Void
extension Kindly.ExternalExchangeType : Swift.Equatable {}
extension Kindly.ExternalExchangeType : Swift.Hashable {}
extension Kindly.ExternalExchangeType : Swift.RawRepresentable {}
extension Kindly.ExternalChatMessageSender : Swift.Equatable {}
extension Kindly.ExternalChatMessageSender : Swift.Hashable {}
extension Kindly.ExternalChatMessageSender : Swift.RawRepresentable {}
extension Kindly.ChatConnectionState : Swift.Equatable {}
extension Kindly.ChatConnectionState : Swift.Hashable {}
